// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package ejson

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	time "time"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson6601e8cdDecodeEjson(in *jlexer.Lexer, out *Person) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "middle":
			if in.IsNull() {
				in.Skip()
				out.Middle = nil
			} else {
				if out.Middle == nil {
					out.Middle = new(string)
				}
				*out.Middle = string(in.String())
			}
		case "dob":
			if in.IsNull() {
				in.Skip()
				out.DOB = nil
			} else {
				if out.DOB == nil {
					out.DOB = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.DOB).UnmarshalJSON(data))
				}
			}
		case "passport":
			if in.IsNull() {
				in.Skip()
				out.Passport = nil
			} else {
				if out.Passport == nil {
					out.Passport = new(Passport)
				}
				easyjson6601e8cdDecodeEjson1(in, out.Passport)
			}
		case "tables":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Tables = make(map[string]TableOf)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v1 TableOf
					easyjson6601e8cdDecodeEjson2(in, &v1)
					(out.Tables)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		case "surname":
			out.Surname = string(in.String())
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeEjson(out *jwriter.Writer, in Person) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Middle != nil {
		const prefix string = ",\"middle\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(*in.Middle))
	}
	if in.DOB != nil {
		const prefix string = ",\"dob\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.DOB).MarshalJSON())
	}
	{
		const prefix string = ",\"passport\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Passport == nil {
			out.RawString("null")
		} else {
			easyjson6601e8cdEncodeEjson1(out, *in.Passport)
		}
	}
	{
		const prefix string = ",\"tables\":"
		out.RawString(prefix)
		if in.Tables == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v2First := true
			for v2Name, v2Value := range in.Tables {
				if v2First {
					v2First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v2Name))
				out.RawByte(':')
				easyjson6601e8cdEncodeEjson2(out, v2Value)
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"surname\":"
		out.RawString(prefix)
		out.String(string(in.Surname))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Person) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeEjson(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Person) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeEjson(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Person) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeEjson(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Person) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeEjson(l, v)
}
func easyjson6601e8cdDecodeEjson2(in *jlexer.Lexer, out *TableOf) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "tableName":
			out.TableName = string(in.String())
		case "tables":
			if in.IsNull() {
				in.Skip()
				out.Tables = nil
			} else {
				in.Delim('[')
				if out.Tables == nil {
					if !in.IsDelim(']') {
						out.Tables = make([]*Table, 0, 8)
					} else {
						out.Tables = []*Table{}
					}
				} else {
					out.Tables = (out.Tables)[:0]
				}
				for !in.IsDelim(']') {
					var v3 *Table
					if in.IsNull() {
						in.Skip()
						v3 = nil
					} else {
						if v3 == nil {
							v3 = new(Table)
						}
						easyjson6601e8cdDecodeEjson3(in, v3)
					}
					out.Tables = append(out.Tables, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeEjson2(out *jwriter.Writer, in TableOf) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"tableName\":"
		out.RawString(prefix[1:])
		out.String(string(in.TableName))
	}
	if len(in.Tables) != 0 {
		const prefix string = ",\"tables\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v4, v5 := range in.Tables {
				if v4 > 0 {
					out.RawByte(',')
				}
				if v5 == nil {
					out.RawString("null")
				} else {
					easyjson6601e8cdEncodeEjson3(out, *v5)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson6601e8cdDecodeEjson3(in *jlexer.Lexer, out *Table) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "counter":
			out.Counter = int(in.Int())
		case "assessments":
			if in.IsNull() {
				in.Skip()
				out.Assessments = nil
			} else {
				in.Delim('[')
				if out.Assessments == nil {
					if !in.IsDelim(']') {
						out.Assessments = make([]int, 0, 8)
					} else {
						out.Assessments = []int{}
					}
				} else {
					out.Assessments = (out.Assessments)[:0]
				}
				for !in.IsDelim(']') {
					var v6 int
					v6 = int(in.Int())
					out.Assessments = append(out.Assessments, v6)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "time":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Time).UnmarshalJSON(data))
			}
		case "avg":
			out.Avg = float64(in.Float64())
		case "tags":
			if in.IsNull() {
				in.Skip()
				out.Tags = nil
			} else {
				in.Delim('[')
				if out.Tags == nil {
					if !in.IsDelim(']') {
						out.Tags = make([]Tag, 0, 2)
					} else {
						out.Tags = []Tag{}
					}
				} else {
					out.Tags = (out.Tags)[:0]
				}
				for !in.IsDelim(']') {
					var v7 Tag
					easyjson6601e8cdDecodeEjson4(in, &v7)
					out.Tags = append(out.Tags, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeEjson3(out *jwriter.Writer, in Table) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"counter\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Counter))
	}
	if len(in.Assessments) != 0 {
		const prefix string = ",\"assessments\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v8, v9 := range in.Assessments {
				if v8 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v9))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix)
		out.Raw((in.Time).MarshalJSON())
	}
	{
		const prefix string = ",\"avg\":"
		out.RawString(prefix)
		out.Float64(float64(in.Avg))
	}
	{
		const prefix string = ",\"tags\":"
		out.RawString(prefix)
		if in.Tags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v10, v11 := range in.Tags {
				if v10 > 0 {
					out.RawByte(',')
				}
				easyjson6601e8cdEncodeEjson4(out, v11)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson6601e8cdDecodeEjson4(in *jlexer.Lexer, out *Tag) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "tagName":
			out.TagName = string(in.String())
		case "tagValue":
			out.TagValue = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeEjson4(out *jwriter.Writer, in Tag) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"tagName\":"
		out.RawString(prefix[1:])
		out.String(string(in.TagName))
	}
	{
		const prefix string = ",\"tagValue\":"
		out.RawString(prefix)
		out.String(string(in.TagValue))
	}
	out.RawByte('}')
}
func easyjson6601e8cdDecodeEjson1(in *jlexer.Lexer, out *Passport) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "number":
			out.Number = string(in.String())
		case "dateDoc":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.DateDoc).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeEjson1(out *jwriter.Writer, in Passport) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"number\":"
		out.RawString(prefix[1:])
		out.String(string(in.Number))
	}
	{
		const prefix string = ",\"dateDoc\":"
		out.RawString(prefix)
		out.Raw((in.DateDoc).MarshalJSON())
	}
	out.RawByte('}')
}
